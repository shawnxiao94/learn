{"version":3,"file":"static/webpack/static\\development\\pages\\c.js.07b4b5c5a151a36a37b8.hot-update.js","sources":["webpack:///./pages/c.js"],"sourcesContent":["import React, { \r\n  Component,\r\n  useState, \r\n  useEffect, \r\n  useLayoutEffect, \r\n  useReducer,\r\n  useRef,\r\n  memo,\r\n  useMemo,\r\n  useCallback\r\n } from 'react'\r\n\r\nclass MyCount extends Component {\r\n  constructor () {\r\n    super()\r\n    this.spanRef = React.createRef()\r\n    this.h2Ref = React.createRef()\r\n  }\r\n  state = {\r\n    count: 0\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log(this.h2Ref.current, this.spanRef.current)\r\n    this.interval = setInterval(() => {\r\n      this.setState({count: this.state.count + 1})\r\n    }, 1000)\r\n  }\r\n  componentWillUnmount() {\r\n    if(this.interval) {\r\n      clearInterval(this.interval)\r\n    }\r\n  }\r\n  render () {\r\n    return (\r\n      <div>\r\n        <h2 ref={this.h2Ref}>c page</h2>\r\n        <span ref={this.spanRef}>{this.state.count}</span>\r\n      </div>\r\n    )\r\n  }\r\n  \r\n}\r\n\r\nfunction MyCountFunc() {\r\n  // const [count, setCount] = useState(0) // 返回数组[a,b]，通过解构使用\r\n\r\n  const [ count, dispatchCount ] = useReducer(CountReducer, 0)\r\n  const [name, setName ] = useState('jokcy')\r\n\r\n  const inputRef = useRef()\r\n  const spanRef = useRef()\r\n\r\n  const config = useMemo(() => ({\r\n    text:  `count is ${count}`,\r\n    color: count > 3 ? 'red' : 'blue'\r\n  }), [count])\r\n\r\n  // useEffect(() => {\r\n  //   const interval = setInterval(() => {\r\n  //     // setCount(c => c + 1)\r\n  //     dispatchCount({ type: 'add'})\r\n  //   }, 1000)\r\n  //   return () => clearInterval(interval)\r\n  // }, []) // useEffect 第二个参数作用 => 没有第二个参数时会不断重复渲染，第二个参数为空数组时只渲染一次。第二个参数有依赖时则依据依赖的变量变化而渲染，变量未变化则不渲染\r\n\r\n  useEffect(() => {\r\n    console.log('effect invoked')\r\n    return () => console.log('effect deteched')\r\n  }, [name])\r\n\r\n  // useLayoutEffect会比useEffect先执行，会在没更新成真正的DOM之前会先执行，useEffect会等插入DOM真实节点后执行\r\n  useLayoutEffect(() => {\r\n    console.log('layout effect invoked')\r\n    console.log(inputRef.current,spanRef.current)\r\n    return () => console.log('layout effect deteched')\r\n  }, [name])\r\n\r\n  const handleButtonClick  = useCallback(() => dispatchCount({type: 'add'}), [])\r\n  // const handleButtonClick  = useMemo( () => () => dispatchCount({type: 'add'}) ,[])\r\n\r\n  return (\r\n    <div>\r\n      <h2>c page MyCountFunc</h2>\r\n      <span ref={spanRef}>{count}</span>\r\n      <input ref={inputRef} value={name} onChange={(e) => setName(e.target.value)} />\r\n      <button onClick={() => dispatchCount({type:'add'})}>{count}</button>\r\n      <Child\r\n        config={config}\r\n        onButtonClick={handleButtonClick}\r\n      >\r\n      </Child>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction CountReducer(state, action) {\r\n  switch (action.type) {\r\n    case 'add':\r\n      return state + 1\r\n    case 'minus':\r\n      return state - 1\r\n    default :\r\n      return state\r\n  }\r\n}\r\n\r\n// memo 用于优化子组件不重复渲染类似shouldComponentUpdate\r\n// useMemo 用于优化业务逻辑不重复渲染\r\n// useCallback和useMemo功能一样，只是它接收的参数为函数,useMemo\r\nconst Child = memo(function Child({ onButtonClick, config }) {\r\n  console.log('child render')\r\n  return (\r\n    <button onClick={onButtonClick} style={{color: config.color}}>\r\n      { config.text }\r\n    </button>\r\n  )\r\n})\r\n\r\nexport default MyCountFunc"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAWA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAMA;AADA;AACA;AAJA;AACA;AAHA;AAIA;AACA;;;AAIA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAGA;;;;AA5BA;AACA;AA+BA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAKA;AACA;AAEA;AAAA;AACA;AACA;AAFA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AANA;AAQA;AAGA;AACA;AACA;AACA;AADA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AAEA;;;;A","sourceRoot":""}