{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { Component, useState, useEffect, useReducer } from 'react';\n\nclass MyCount extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      count: 0\n    });\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => {\n      this.setState({\n        count: this.state.count + 1\n      });\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n\n  render() {\n    return __jsx(\"div\", null, __jsx(\"h2\", null, \"c page\"), __jsx(\"span\", null, this.state.count));\n  }\n\n}\n\nfunction MyCountFunc() {\n  // const [count, setCount] = useState(0) // 返回数组[a,b]，通过解构使用\n  const {\n    0: count,\n    1: dispatchCount\n  } = useReducer(CountReducer, 0);\n  const {\n    0: name,\n    1: setName\n  } = useState('jokcy');\n  useEffect(() => {\n    const interval = setInterval(() => {\n      // setCount(c => c + 1)\n      dispatchCount({\n        type: 'minus'\n      });\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n  useEffect(() => {\n    console.log('effect invoked');\n    return () => console.log('effect deteched');\n  });\n  return __jsx(\"div\", null, __jsx(\"h2\", null, \"c page MyCountFunc\"), __jsx(\"span\", null, count), __jsx(\"input\", {\n    value: name,\n    onChange: e => setName(e.target.value)\n  }));\n}\n\nfunction CountReducer(state, action) {\n  switch (action.type) {\n    case 'add':\n      return state + 1;\n\n    case 'minus':\n      return state - 1;\n\n    default:\n      return state;\n  }\n}\n\nexport default MyCountFunc;","map":{"version":3,"sources":["F:\\vue-react-webpack-learn\\learn\\react\\nextJS-project\\pages\\c.js"],"names":["React","Component","useState","useEffect","useReducer","MyCount","count","componentDidMount","interval","setInterval","setState","state","componentWillUnmount","clearInterval","render","MyCountFunc","dispatchCount","CountReducer","name","setName","type","console","log","e","target","value","action"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,SAArC,EAAgDC,UAAhD,QAAkE,OAAlE;;AAEA,MAAMC,OAAN,SAAsBJ,SAAtB,CAAgC;AAAA;AAAA;;AAAA,mCACtB;AACNK,MAAAA,KAAK,EAAE;AADD,KADsB;AAAA;;AAK9BC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,QAAL,GAAgBC,WAAW,CAAC,MAAM;AAChC,WAAKC,QAAL,CAAc;AAACJ,QAAAA,KAAK,EAAE,KAAKK,KAAL,CAAWL,KAAX,GAAmB;AAA3B,OAAd;AACD,KAF0B,EAExB,IAFwB,CAA3B;AAGD;;AACDM,EAAAA,oBAAoB,GAAG;AACrB,QAAG,KAAKJ,QAAR,EAAkB;AAChBK,MAAAA,aAAa,CAAC,KAAKL,QAAN,CAAb;AACD;AACF;;AACDM,EAAAA,MAAM,GAAI;AACR,WACE,mBACE,2BADF,EAEE,oBAAO,KAAKH,KAAL,CAAWL,KAAlB,CAFF,CADF;AAMD;;AAtB6B;;AA0BhC,SAASS,WAAT,GAAuB;AACrB;AAEA,QAAM;AAAA,OAAET,KAAF;AAAA,OAASU;AAAT,MAA2BZ,UAAU,CAACa,YAAD,EAAe,CAAf,CAA3C;AACA,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAmBjB,QAAQ,CAAC,OAAD,CAAjC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMK,QAAQ,GAAGC,WAAW,CAAC,MAAM;AACjC;AACAO,MAAAA,aAAa,CAAC;AAAEI,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAb;AACD,KAH2B,EAGzB,IAHyB,CAA5B;AAIA,WAAO,MAAMP,aAAa,CAACL,QAAD,CAA1B;AACD,GANQ,EAMN,EANM,CAAT;AAQAL,EAAAA,SAAS,CAAC,MAAM;AACdkB,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,WAAO,MAAMD,OAAO,CAACC,GAAR,CAAY,iBAAZ,CAAb;AACD,GAHQ,CAAT;AAKA,SACE,mBACE,uCADF,EAEE,oBAAOhB,KAAP,CAFF,EAGE;AAAO,IAAA,KAAK,EAAEY,IAAd;AAAoB,IAAA,QAAQ,EAAGK,CAAD,IAAOJ,OAAO,CAACI,CAAC,CAACC,MAAF,CAASC,KAAV;AAA5C,IAHF,CADF;AAOD;;AAED,SAASR,YAAT,CAAsBN,KAAtB,EAA6Be,MAA7B,EAAqC;AACnC,UAAQA,MAAM,CAACN,IAAf;AACE,SAAK,KAAL;AACE,aAAOT,KAAK,GAAG,CAAf;;AACF,SAAK,OAAL;AACE,aAAOA,KAAK,GAAG,CAAf;;AACF;AACE,aAAOA,KAAP;AANJ;AAQD;;AAED,eAAeI,WAAf","sourcesContent":["import React, { Component, useState, useEffect, useReducer } from 'react'\r\n\r\nclass MyCount extends Component {\r\n  state = {\r\n    count: 0\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.interval = setInterval(() => {\r\n      this.setState({count: this.state.count + 1})\r\n    }, 1000)\r\n  }\r\n  componentWillUnmount() {\r\n    if(this.interval) {\r\n      clearInterval(this.interval)\r\n    }\r\n  }\r\n  render () {\r\n    return (\r\n      <div>\r\n        <h2>c page</h2>\r\n        <span>{this.state.count}</span>\r\n      </div>\r\n    )\r\n  }\r\n  \r\n}\r\n\r\nfunction MyCountFunc() {\r\n  // const [count, setCount] = useState(0) // 返回数组[a,b]，通过解构使用\r\n\r\n  const [ count, dispatchCount ] = useReducer(CountReducer, 0)\r\n  const [name, setName ] = useState('jokcy')\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      // setCount(c => c + 1)\r\n      dispatchCount({ type: 'minus'})\r\n    }, 1000)\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    console.log('effect invoked')\r\n    return () => console.log('effect deteched')\r\n  })\r\n\r\n  return (\r\n    <div>\r\n      <h2>c page MyCountFunc</h2>\r\n      <span>{count}</span>\r\n      <input value={name} onChange={(e) => setName(e.target.value)} />\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction CountReducer(state, action) {\r\n  switch (action.type) {\r\n    case 'add':\r\n      return state + 1\r\n    case 'minus':\r\n      return state - 1\r\n    default :\r\n      return state\r\n  }\r\n}\r\n\r\nexport default MyCountFunc"]},"metadata":{},"sourceType":"module"}