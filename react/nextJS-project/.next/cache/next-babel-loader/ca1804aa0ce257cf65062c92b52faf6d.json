{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { Component, useState, useEffect, useLayoutEffect, useReducer } from 'react';\n\nclass MyCount extends Component {\n  constructor() {\n    super();\n\n    _defineProperty(this, \"state\", {\n      count: 0\n    });\n\n    this.ref = React.createRef();\n  }\n\n  componentDidMount() {\n    console.log(this.ref.current);\n    this.interval = setInterval(() => {\n      this.setState({\n        count: this.state.count + 1\n      });\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n\n  render() {\n    return __jsx(\"div\", null, __jsx(\"h2\", {\n      ref: this.ref\n    }, \"c page\"), __jsx(\"span\", {\n      ref: this.ref\n    }, this.state.count));\n  }\n\n}\n\nfunction MyCountFunc() {\n  // const [count, setCount] = useState(0) // 返回数组[a,b]，通过解构使用\n  const {\n    0: count,\n    1: dispatchCount\n  } = useReducer(CountReducer, 0);\n  const {\n    0: name,\n    1: setName\n  } = useState('jokcy');\n  useEffect(() => {\n    const interval = setInterval(() => {\n      // setCount(c => c + 1)\n      dispatchCount({\n        type: 'minus'\n      });\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []); // useEffect 第二个参数作用 => 没有第二个参数时会不断重复渲染，第二个参数为空数组时只渲染一次。第二个参数有依赖时则依据依赖的变量变化而渲染，变量未变化则不渲染\n\n  useEffect(() => {\n    console.log('effect invoked');\n    return () => console.log('effect deteched');\n  }, [name]); // useLayoutEffect会比useEffect先执行，会在没更新成真正的DOM之前会先执行，useEffect会等插入DOM真实节点后执行\n\n  useLayoutEffect(() => {\n    console.log('layout effect invoked');\n    return () => console.log('layout effect deteched');\n  }, [name]);\n  return __jsx(\"div\", null, __jsx(\"h2\", null, \"c page MyCountFunc\"), __jsx(\"span\", null, count), __jsx(\"input\", {\n    value: name,\n    onChange: e => setName(e.target.value)\n  }), __jsx(\"button\", {\n    onClick: () => dispatchCount({\n      type: 'add'\n    })\n  }, count));\n}\n\nfunction CountReducer(state, action) {\n  switch (action.type) {\n    case 'add':\n      return state + 1;\n\n    case 'minus':\n      return state - 1;\n\n    default:\n      return state;\n  }\n}\n\nexport default MyCount;","map":{"version":3,"sources":["F:\\vue-react-webpack-learn\\learn\\react\\nextJS-project\\pages\\c.js"],"names":["React","Component","useState","useEffect","useLayoutEffect","useReducer","MyCount","constructor","count","ref","createRef","componentDidMount","console","log","current","interval","setInterval","setState","state","componentWillUnmount","clearInterval","render","MyCountFunc","dispatchCount","CountReducer","name","setName","type","e","target","value","action"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,SAArC,EAAgDC,eAAhD,EAAiEC,UAAjE,QAAmF,OAAnF;;AAEA,MAAMC,OAAN,SAAsBL,SAAtB,CAAgC;AAC9BM,EAAAA,WAAW,GAAI;AACb;;AADa,mCAIP;AACNC,MAAAA,KAAK,EAAE;AADD,KAJO;;AAEb,SAAKC,GAAL,GAAWT,KAAK,CAACU,SAAN,EAAX;AACD;;AAKDC,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKJ,GAAL,CAASK,OAArB;AACA,SAAKC,QAAL,GAAgBC,WAAW,CAAC,MAAM;AAChC,WAAKC,QAAL,CAAc;AAACT,QAAAA,KAAK,EAAE,KAAKU,KAAL,CAAWV,KAAX,GAAmB;AAA3B,OAAd;AACD,KAF0B,EAExB,IAFwB,CAA3B;AAGD;;AACDW,EAAAA,oBAAoB,GAAG;AACrB,QAAG,KAAKJ,QAAR,EAAkB;AAChBK,MAAAA,aAAa,CAAC,KAAKL,QAAN,CAAb;AACD;AACF;;AACDM,EAAAA,MAAM,GAAI;AACR,WACE,mBACE;AAAI,MAAA,GAAG,EAAE,KAAKZ;AAAd,gBADF,EAEE;AAAM,MAAA,GAAG,EAAE,KAAKA;AAAhB,OAAsB,KAAKS,KAAL,CAAWV,KAAjC,CAFF,CADF;AAMD;;AA3B6B;;AA+BhC,SAASc,WAAT,GAAuB;AACrB;AAEA,QAAM;AAAA,OAAEd,KAAF;AAAA,OAASe;AAAT,MAA2BlB,UAAU,CAACmB,YAAD,EAAe,CAAf,CAA3C;AACA,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAmBxB,QAAQ,CAAC,OAAD,CAAjC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMY,QAAQ,GAAGC,WAAW,CAAC,MAAM;AACjC;AACAO,MAAAA,aAAa,CAAC;AAAEI,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAb;AACD,KAH2B,EAGzB,IAHyB,CAA5B;AAIA,WAAO,MAAMP,aAAa,CAACL,QAAD,CAA1B;AACD,GANQ,EAMN,EANM,CAAT,CANqB,CAYd;;AAEPZ,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,WAAO,MAAMD,OAAO,CAACC,GAAR,CAAY,iBAAZ,CAAb;AACD,GAHQ,EAGN,CAACY,IAAD,CAHM,CAAT,CAdqB,CAmBrB;;AACArB,EAAAA,eAAe,CAAC,MAAM;AACpBQ,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACA,WAAO,MAAMD,OAAO,CAACC,GAAR,CAAY,wBAAZ,CAAb;AACD,GAHc,EAGZ,CAACY,IAAD,CAHY,CAAf;AAKA,SACE,mBACE,uCADF,EAEE,oBAAOjB,KAAP,CAFF,EAGE;AAAO,IAAA,KAAK,EAAEiB,IAAd;AAAoB,IAAA,QAAQ,EAAGG,CAAD,IAAOF,OAAO,CAACE,CAAC,CAACC,MAAF,CAASC,KAAV;AAA5C,IAHF,EAIE;AAAQ,IAAA,OAAO,EAAE,MAAMP,aAAa,CAAC;AAACI,MAAAA,IAAI,EAAC;AAAN,KAAD;AAApC,KAAqDnB,KAArD,CAJF,CADF;AAQD;;AAED,SAASgB,YAAT,CAAsBN,KAAtB,EAA6Ba,MAA7B,EAAqC;AACnC,UAAQA,MAAM,CAACJ,IAAf;AACE,SAAK,KAAL;AACE,aAAOT,KAAK,GAAG,CAAf;;AACF,SAAK,OAAL;AACE,aAAOA,KAAK,GAAG,CAAf;;AACF;AACE,aAAOA,KAAP;AANJ;AAQD;;AAED,eAAeZ,OAAf","sourcesContent":["import React, { Component, useState, useEffect, useLayoutEffect, useReducer } from 'react'\r\n\r\nclass MyCount extends Component {\r\n  constructor () {\r\n    super()\r\n    this.ref = React.createRef()\r\n  }\r\n  state = {\r\n    count: 0\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log(this.ref.current)\r\n    this.interval = setInterval(() => {\r\n      this.setState({count: this.state.count + 1})\r\n    }, 1000)\r\n  }\r\n  componentWillUnmount() {\r\n    if(this.interval) {\r\n      clearInterval(this.interval)\r\n    }\r\n  }\r\n  render () {\r\n    return (\r\n      <div>\r\n        <h2 ref={this.ref}>c page</h2>\r\n        <span ref={this.ref}>{this.state.count}</span>\r\n      </div>\r\n    )\r\n  }\r\n  \r\n}\r\n\r\nfunction MyCountFunc() {\r\n  // const [count, setCount] = useState(0) // 返回数组[a,b]，通过解构使用\r\n\r\n  const [ count, dispatchCount ] = useReducer(CountReducer, 0)\r\n  const [name, setName ] = useState('jokcy')\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      // setCount(c => c + 1)\r\n      dispatchCount({ type: 'minus'})\r\n    }, 1000)\r\n    return () => clearInterval(interval)\r\n  }, []) // useEffect 第二个参数作用 => 没有第二个参数时会不断重复渲染，第二个参数为空数组时只渲染一次。第二个参数有依赖时则依据依赖的变量变化而渲染，变量未变化则不渲染\r\n\r\n  useEffect(() => {\r\n    console.log('effect invoked')\r\n    return () => console.log('effect deteched')\r\n  }, [name])\r\n\r\n  // useLayoutEffect会比useEffect先执行，会在没更新成真正的DOM之前会先执行，useEffect会等插入DOM真实节点后执行\r\n  useLayoutEffect(() => {\r\n    console.log('layout effect invoked')\r\n    return () => console.log('layout effect deteched')\r\n  }, [name])\r\n\r\n  return (\r\n    <div>\r\n      <h2>c page MyCountFunc</h2>\r\n      <span>{count}</span>\r\n      <input value={name} onChange={(e) => setName(e.target.value)} />\r\n      <button onClick={() => dispatchCount({type:'add'})}>{count}</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction CountReducer(state, action) {\r\n  switch (action.type) {\r\n    case 'add':\r\n      return state + 1\r\n    case 'minus':\r\n      return state - 1\r\n    default :\r\n      return state\r\n  }\r\n}\r\n\r\nexport default MyCount"]},"metadata":{},"sourceType":"module"}