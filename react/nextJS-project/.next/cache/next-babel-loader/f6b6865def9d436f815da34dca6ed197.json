{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { Component, useState, useEffect, useLayoutEffect, useReducer, useRef, memo, useMemo, useCallback } from 'react';\n\nclass MyCount extends Component {\n  constructor() {\n    super();\n\n    _defineProperty(this, \"state\", {\n      count: 0\n    });\n\n    this.spanRef = React.createRef();\n    this.h2Ref = React.createRef();\n  }\n\n  componentDidMount() {\n    console.log(this.h2Ref.current, this.spanRef.current);\n    this.interval = setInterval(() => {\n      this.setState({\n        count: this.state.count + 1\n      });\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n\n  render() {\n    return __jsx(\"div\", null, __jsx(\"h2\", {\n      ref: this.h2Ref\n    }, \"c page\"), __jsx(\"span\", {\n      ref: this.spanRef\n    }, this.state.count));\n  }\n\n}\n\nfunction MyCountFunc() {\n  // const [count, setCount] = useState(0) // 返回数组[a,b]，通过解构使用\n  const {\n    0: count,\n    1: dispatchCount\n  } = useReducer(CountReducer, 0);\n  const {\n    0: name,\n    1: setName\n  } = useState('jokcy');\n  const inputRef = useRef();\n  const spanRef = useRef();\n  const config = useMemo(() => ({\n    text: `count is ${count}`,\n    color: count > 3 ? 'red' : 'blue'\n  }), [count]); // useEffect(() => {\n  //   const interval = setInterval(() => {\n  //     // setCount(c => c + 1)\n  //     dispatchCount({ type: 'add'})\n  //   }, 1000)\n  //   return () => clearInterval(interval)\n  // }, []) // useEffect 第二个参数作用 => 没有第二个参数时会不断重复渲染，第二个参数为空数组时只渲染一次。第二个参数有依赖时则依据依赖的变量变化而渲染，变量未变化则不渲染\n\n  useEffect(() => {\n    console.log('effect invoked');\n    return () => console.log('effect deteched');\n  }, [name]); // useLayoutEffect会比useEffect先执行，会在没更新成真正的DOM之前会先执行，useEffect会等插入DOM真实节点后执行\n\n  useLayoutEffect(() => {\n    console.log('layout effect invoked');\n    console.log(inputRef.current, spanRef.current);\n    return () => console.log('layout effect deteched');\n  }, [name]); // const handleButtonClick  = useCallback(() => dispatchCount({type: 'add'}), [])\n\n  const handleButtonClick = useMemo(() => () => dispatchCount({\n    type: 'add'\n  }), []);\n  return __jsx(\"div\", null, __jsx(\"h2\", null, \"c page MyCountFunc\"), __jsx(\"span\", {\n    ref: spanRef\n  }, count), __jsx(\"input\", {\n    ref: inputRef,\n    value: name,\n    onChange: e => setName(e.target.value)\n  }), __jsx(\"button\", {\n    onClick: () => dispatchCount({\n      type: 'add'\n    })\n  }, count), __jsx(Child, {\n    config: config,\n    onButtonClick: handleButtonClick\n  }));\n}\n\nfunction CountReducer(state, action) {\n  switch (action.type) {\n    case 'add':\n      return state + 1;\n\n    case 'minus':\n      return state - 1;\n\n    default:\n      return state;\n  }\n} // memo 用于优化子组件不重复渲染类似shouldComponentUpdate\n// useMemo 用于优化业务逻辑不重复渲染\n// useCallback和useMemo功能一样，只是它接收的参数为函数,useMemo\n\n\nconst Child = memo(function Child({\n  onButtonClick,\n  config\n}) {\n  console.log('child render');\n  return __jsx(\"button\", {\n    onClick: onButtonClick,\n    style: {\n      color: config.color\n    }\n  }, config.text);\n});\nexport default MyCountFunc;","map":{"version":3,"sources":["F:\\vue-react-webpack-learn\\learn\\react\\nextJS-project\\pages\\c.js"],"names":["React","Component","useState","useEffect","useLayoutEffect","useReducer","useRef","memo","useMemo","useCallback","MyCount","constructor","count","spanRef","createRef","h2Ref","componentDidMount","console","log","current","interval","setInterval","setState","state","componentWillUnmount","clearInterval","render","MyCountFunc","dispatchCount","CountReducer","name","setName","inputRef","config","text","color","handleButtonClick","type","e","target","value","action","Child","onButtonClick"],"mappings":"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","sourcesContent":["import React, { \r\n  Component,\r\n  useState, \r\n  useEffect, \r\n  useLayoutEffect, \r\n  useReducer,\r\n  useRef,\r\n  memo,\r\n  useMemo,\r\n  useCallback\r\n } from 'react'\r\n\r\nclass MyCount extends Component {\r\n  constructor () {\r\n    super()\r\n    this.spanRef = React.createRef()\r\n    this.h2Ref = React.createRef()\r\n  }\r\n  state = {\r\n    count: 0\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log(this.h2Ref.current, this.spanRef.current)\r\n    this.interval = setInterval(() => {\r\n      this.setState({count: this.state.count + 1})\r\n    }, 1000)\r\n  }\r\n  componentWillUnmount() {\r\n    if(this.interval) {\r\n      clearInterval(this.interval)\r\n    }\r\n  }\r\n  render () {\r\n    return (\r\n      <div>\r\n        <h2 ref={this.h2Ref}>c page</h2>\r\n        <span ref={this.spanRef}>{this.state.count}</span>\r\n      </div>\r\n    )\r\n  }\r\n  \r\n}\r\n\r\nfunction MyCountFunc() {\r\n  // const [count, setCount] = useState(0) // 返回数组[a,b]，通过解构使用\r\n\r\n  const [ count, dispatchCount ] = useReducer(CountReducer, 0)\r\n  const [name, setName ] = useState('jokcy')\r\n\r\n  const inputRef = useRef()\r\n  const spanRef = useRef()\r\n\r\n  const config = useMemo(() => ({\r\n    text:  `count is ${count}`,\r\n    color: count > 3 ? 'red' : 'blue'\r\n  }), [count])\r\n\r\n  // useEffect(() => {\r\n  //   const interval = setInterval(() => {\r\n  //     // setCount(c => c + 1)\r\n  //     dispatchCount({ type: 'add'})\r\n  //   }, 1000)\r\n  //   return () => clearInterval(interval)\r\n  // }, []) // useEffect 第二个参数作用 => 没有第二个参数时会不断重复渲染，第二个参数为空数组时只渲染一次。第二个参数有依赖时则依据依赖的变量变化而渲染，变量未变化则不渲染\r\n\r\n  useEffect(() => {\r\n    console.log('effect invoked')\r\n    return () => console.log('effect deteched')\r\n  }, [name])\r\n\r\n  // useLayoutEffect会比useEffect先执行，会在没更新成真正的DOM之前会先执行，useEffect会等插入DOM真实节点后执行\r\n  useLayoutEffect(() => {\r\n    console.log('layout effect invoked')\r\n    console.log(inputRef.current,spanRef.current)\r\n    return () => console.log('layout effect deteched')\r\n  }, [name])\r\n\r\n  // const handleButtonClick  = useCallback(() => dispatchCount({type: 'add'}), [])\r\n  const handleButtonClick  = useMemo( () => () => dispatchCount({type: 'add'}) ,[])\r\n\r\n  return (\r\n    <div>\r\n      <h2>c page MyCountFunc</h2>\r\n      <span ref={spanRef}>{count}</span>\r\n      <input ref={inputRef} value={name} onChange={(e) => setName(e.target.value)} />\r\n      <button onClick={() => dispatchCount({type:'add'})}>{count}</button>\r\n      <Child\r\n        config={config}\r\n        onButtonClick={handleButtonClick}\r\n      >\r\n      </Child>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction CountReducer(state, action) {\r\n  switch (action.type) {\r\n    case 'add':\r\n      return state + 1\r\n    case 'minus':\r\n      return state - 1\r\n    default :\r\n      return state\r\n  }\r\n}\r\n\r\n// memo 用于优化子组件不重复渲染类似shouldComponentUpdate\r\n// useMemo 用于优化业务逻辑不重复渲染\r\n// useCallback和useMemo功能一样，只是它接收的参数为函数,useMemo\r\nconst Child = memo(function Child({ onButtonClick, config }) {\r\n  console.log('child render')\r\n  return (\r\n    <button onClick={onButtonClick} style={{color: config.color}}>\r\n      { config.text }\r\n    </button>\r\n  )\r\n})\r\n\r\nexport default MyCountFunc"]},"metadata":{},"sourceType":"module"}